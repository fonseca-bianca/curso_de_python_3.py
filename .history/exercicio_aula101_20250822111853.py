"""
Adiando a execu√ß√£o de fun√ß√µes (Closure):
    Pra fazer isso, precisamos 'Decorar' a fun√ß√£o.
    Decorar uma fun√ß√£o significa modific√°-la ou envolver seu comportamento 
usando um decorator (uma fun√ß√£o que recebe outra fun√ß√£o como arg e retorna 
uma nova fun√ß√£o).

üìå Exemplo simples:

def meu_decorador(func):
    def wrapper():
        print("Antes da fun√ß√£o")
        func()
        print("Depois da fun√ß√£o")
    return wrapper

@meu_decorador   # aqui a fun√ß√£o √© "decorada" (semelhante √†s @nnotations em 
Java)
def diga_ola():
    print("Ol√°!")

diga_ola()


Output:
Antes da fun√ß√£o
Ol√°! # aqui a fun√ß√£o foi decorada
Depois da fun√ß√£o


üëâ Ou seja, ‚Äúdecorar‚Äù √© aplicar l√≥gica extra sem mudar o c√≥digo original da fun√ß√£o.

Quer que eu te mostre como usar isso em algo pr√°tico, tipo medir o tempo de execu√ß√£o de uma fun√ß√£o?
"""

def soma(x, y):
    return x + y

def multiplica(x, y):
    return x * y

def criar_funcao(funcao, *args):
    return funcao(*args)




soma_com_cinco = criar_funcao(soma, 5)
multiplica_por_dez = criar_funcao(multiplica, 10)