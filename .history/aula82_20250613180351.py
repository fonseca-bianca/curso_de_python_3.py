"""
Fun√ß√µes Lambda Complexas:
    M√∫ltiplos argumentos;
    Mais de uma opera√ß√£o dentro da express√£o;
    Ou que retorna tuplas, dicion√°rios, listas, express√µes condicionais, 
    chamadas de fun√ß√£o, etc.;
    lambda n√£o pode ter m√∫ltiplas linhas (sem if/else completo, for, while 
    ou print separados);
    Ideal para uso r√°pido e simples, mas se ficar muito complexa, √© melhor 
    usar def.;
    Usar em fun√ß√µes como map(), filter(), sorted(), reduce();
    usar quando a l√≥gica √© curta e clara.
    
    ex.: Lambda usada pra ordenar Nome Completo:
        sorted(lista, key=lambda x: x['nome'] + ' ' + x['sobrenome'])

Estrutura Lambda:
    lambda argumentos: express√£o
"""

def executa(funcao, *args):
    return funcao(*args)
# Recebe uma fun√ß√£o (funcao) e qualquer quantidade de argumentos (*args).
# Usa funcao(*args) pra executar essa fun√ß√£o com os argumentos recebidos.
# üí° *args significa: "junte todos os argumentos extras em uma tupla".


# def soma(x, y):
#     return x + y


# def cria_multiplicador(multiplicador):
#     def multiplica(numero):
#         return numero * multiplicador
#     return multiplica


# duplica = cria_multiplicador(2)

# Primeiro uso: fun√ß√£o lambda aninhada (fun√ß√£o que retorna outra fun√ß√£o)
duplica = executa(
    lambda m: lambda n: n * m,
    2
)
print(duplica(2)) # duplica(2) => 2 * 2 = 4
# lambda m: lambda n: n * m --> cria uma fun√ß√£o que retorna outra fun√ß√£o.
# Voc√™ passa 2 como argumento (m = 2), ent√£o vira: lambda n: n * 2
# Isso √© igual a uma fun√ß√£o "multiplicador" que duplica o valor.



print(
    executa(
        lambda x, y: x + y,
        2, 3
    ),
)

print(
    executa(
        lambda *args: sum(args),
        1, 2, 3, 4, 5, 6, 7
    )
)